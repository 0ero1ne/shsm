#!/usr/bin/python3

#title|netpars
#version|0.3-b1
#author|0ero1ne
#info|nmap parser with features


# Libraries
try:
	import subprocess, sys, socket, requests, time, os
except ImportError:
	print("Cannot import libraries!")


# Scan function
def Scanner():
	host_list = []
	try:
		while True:
			# Variables
			ip = "192.168.1.1"
			subnet="24"
			host_current = []
			
			# Outputs
			os.system("clear")
			print("\x1b[1;35m\t\t\t  0eroParser")	
			print("\x1b[1;32m\t\t\t--------------\n")	
			# Nmap process
			p = str(str(subprocess.Popen(
	                                		[r"sudo","nmap","-sn",ip+"/"+subnet],
	                                		stdout=subprocess.PIPE).communicate()
	                                		).split('\\n')).split('Nmap')[2:-2]
			#############
			# Parse data
			for c,x in enumerate(p):
				############## DEBUG
				#print(x.split(","),"\n")
				############## EOD
				# IP
				ip = str(str(x.split(",")[0]).split(" ")[-1]).translate({ord(i): None for i in '()'})[:-1]

				# Name
				if len(str(x.split(",")[0]).split(" ")) is 6:
					name = str(x.split(",")[0]).split(" ")[-2]
				else:
					name = "Hostname unknown"
					
				# MAC
				if "MAC" in x.split(",")[2][2:5]:
					mac = str(x.split(",")[2]).split(" ")[3]
				else:
					mac = "--:--:--:--:--:--"
				
				# Vendor
				if "Illegal" in x.split(",")[-2]:
					nvendor = "Unknown"
				else:
					#nvendor = x.split(",")[-2]
					nvendor = str(x.split(",")[-2]).split("(")[-1][:-2]
					
				# Output
				print("\x1b[1;33m{0:>15} \x1b[1;31m|\x1b[1;32m {1} \x1b[1;31m|\x1b[1;35m {2} \x1b[1;31m({3})".format(ip,mac,name,nvendor))

				host_current.append(mac)
				# Sleep time for macvendors request
				time.sleep(0.5)
			# End of parser
			###############
			# Check lists and clean them
			for x in host_current:
				if x not in host_list:
					host_list.append(x)
					#os.system("say +")
			for y in host_list:
				if y not in host_current:
					host_list.remove(y)
					#os.system("say -")
			# End of check
			###############
			# Sleep time between each scan
			time.sleep(3)
	# If CTRL-C print exit message
	except KeyboardInterrupt:
		print('\x1b[;1mExit...')

# Run
Scanner()
